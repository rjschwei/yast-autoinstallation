
<chapter id="rulesandclass">
    <title>Rules and Classes</title>
  <section id="rules">
    <title>Rule based auto-installation</title>
    <para>
      Rules offer the possibility to configure a system depending on system
      attributes by merging multiple control file during installation. The
      rules based installation is controlled by a rules file.
    </para>
    <para>
      The rules file is an XML based file that contains
      rules for each group of systems (or single systems) that you want to
      automatically install. A set of rules distinguish a group of systems based on
      one or more system attributes, after passing all rules, it links each
      group of rules to a profile. Both the rules file and the profiles must be
      located in a pre-defined and accessible location.
    </para>
    <para>
        The rules file is retrieved only if no specific control is supplied
        using the <emphasis>autoyast</emphasis> keyword. For example, if the
        following is used, the rules file wont be evaluated:
    </para>
    <screen>
        autoyast=http://10.10.0.1/profile/test.xml
    </screen>
    <figure id="rules_fig1">
      <title id="rules_fig1.title" >Rules</title>
      <mediaobject>&rules;</mediaobject>
    </figure>
    <para>
      If more than one rule apply, the final profile for each group is generated
      on the fly using a merge script. The merging process is based on the
      order of the rules and later rules override configuration data in earlier rules.
    </para>
    <para>
      The use of  a rules file is optional. If the rules file is not found,
      system installation proceeds in the 
      classic way by just using the supplied profile or by searching for the
      profile depending on the <emphasis>MAC</emphasis> or the
      <emphasis>IP</emphasis> address of the system.     
    </para>
<!--
    <para>
      In the previous scenario, you would create a rules file with two different
      rules, one rule for the development and another rule for the sales
      department. For each rule, you could use different system parameters to
      distinguish the groups from one another: the development department has SMP
      and SCI  based systems and the sales group has IDE based systems. Each rule
      would also contain a link to an appropriate profile. For example, in the
      rule for the development department, you would add a link to the profile, called
      <filename>devel.xml</filename>, that you created for this department. And, in the rule
      for the sales department, you would add a link to the profile, called
      <filename>sales.xml</filename>, that you created for the sales department.
    </para>
-->

    <section id="rulesfile">
      <title>Rules File explained</title>
   
      <example>
	<title>
	  Simple rules file
	</title>		

	<para>
	  The following simple example illustrates how the rules file is used
	  to retrieve the configuration for a client with known hardware.
	</para>
	<screen>
<![CDATA[
<?xml version="1.0"?>
<!DOCTYPE autoinstall SYSTEM "/usr/share/autoinstall/dtd/rules.dtd">
<autoinstall xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">
  <rules config:type="list">
    <rule>
       <disksize>
            <match>/dev/hdc 1000</match>
            <match_type>greater</match_type>
       </disksize>
       <result>
            <profile>machine1.xml</profile>
            <continue config:type="boolean">false</continue>
        </result>
    </rule>
    <rule>
       <disksize>
            <match>/dev/hda 1000</match>
            <match_type>greater</match_type>
       </disksize>
       <result>
            <profile>machine2.xml</profile>
            <continue config:type="boolean">false</continue>
        </result>
    </rule>
  </rules>
</autoinstall>
]]>
	    </screen>

	  </example>	 
      <para>
	The last example defines 2 rules and provides a different profile for
	every rule. The rule used in this case is
	<emphasis>disksize</emphasis>. After parsing the rules file, &yast2;
	attempts to match the system being installed to the rules in the 
	<filename>rules.xml</filename> file in the following order: first rule through the
	last rule. A rule match occurs when the system being installed matches
	all of the system attributes defined in the rule. As soon as a system
	matches a rule, the result resource is added to the
	stack of profiles  &autoyast; will be using to create the final
	profile.  The <emphasis>continue</emphasis> property tells &autoyast; if it should
        continue with other rules or not after a match has been found. 
      </para>
      <para>
	If the first rule does not match,  next rule in the list is examined
	until a match is found.
      </para>
      <para>
	Using the <emphasis>disksize</emphasis> attribute, you can
	provide different configurations for different hard drives with
	different size. First rule checks if the device
	<emphasis>/dev/hdc</emphasis> is available and if it is greater than 1
	GB in size using the <emphasis>match</emphasis> property. 
      </para>
    
      <para>
	A rule must have at least one attribute to be matched. If you need
	to check more attributes, i.e. memory or architectures, you can add
        more attributes in the rule resource as shown in the next example.
      </para>
      <example>
	<title>
	  Simple rules file
	</title>		

	<para>
	  The following simple example illustrates how the rules file is used
	  to retrieve the configuration for a client with known hardware.
	</para>
	<screen>
<![CDATA[
<?xml version="1.0"?>
<!DOCTYPE autoinstall SYSTEM "/usr/share/autoinstall/dtd/rules.dtd"> 
<autoinstall xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">
  <rules config:type="list">
    <rule>
       <disksize>
            <match>/dev/hdc 1000</match>
            <match_type>greater</match_type>
       </disksize>
       <memsize>	    
            <match>1000</match>
            <match_type>greater</match_type>
       </memsize>
       <result>
            <profile>machine1.xml</profile>
            <continue config:type="boolean">false</continue>
        </result>
    </rule>
    <rule>
       <disksize>
            <match>/dev/hda 1000</match>
            <match_type>greater</match_type>
       </disksize>
       <memsize>	    
            <match>256</match>
            <match_type>greater</match_type>
       </memsize>
       <result>
            <profile>machine2.xml</profile>
            <continue config:type="boolean">false</continue>
        </result>
    </rule>
  </rules>
</autoinstall>
]]>
	</screen>

      </example>	 
      <para>
	The rules directory must be located in the same referenced directory
	used with the <emphasis>autoyast</emphasis> keyword on boot time, so
	if the client was booted using<emphasis> autoyast=http://10.10.0.1/profiles/</emphasis>,
	&autoyast; will search for the rules file in 
        <emphasis>http://10.10.0.1/profiles/rules/rules.xml</emphasis>.
      </para>
    </section>
    <section id="customrules">
        <title>Custom Rules</title>
        <para>
            If the attributes autoyast provides for rules are not enough for you,
            you can use custom rules. Custom rules are more or less a shell script
            you have to write has and whose output on STDOUT is being used to know
            which autoyast profile should be fetched. STDERR will be ignored.
        </para>
        <para>
            Here is an example for the use of a custom rules:
        </para>
        <para>
            <screen>
<![CDATA[
<rule>
    <custom1>
        <script>
if grep -i intel /proc/cpuinfo > /dev/null; then
echo -n "intel"
else
echo -n "non_intel"
fi;
        </script>
        <match>*</match>
        <match_type>exact</match_type>
    </custom1>
    <result>
         <profile>@custom1@.xml</profile>
         <continue config:type="boolean">true</continue>
    </result>
</rule>
]]>
            </screen>
        </para>
        <para>
            The script in this rule can echo either "intel" or "non_intel" to STDOUT (the
            output of the grep command must be directed to /dev/null in this case).
            Autoyast will catch that output and will fetch a file with the name "intel.xml"
            or "non_intel.xml". This file can contain the autoyast profile part for the
            software selection for example, in the case you want to do a different
            software selection on intel hardware than on others. So the output of the rule
            script will be filled between the two '@' characters, to determine the filename of
            the profile to fetch.
        </para>
        <para>
            The number of custom rules is limited to 5. So you can use custom1 to custom5.
        </para>
    </section>
    <section id="matchtypes">
        <title>Match Types for rules</title>
        <para>
            you can have five different match_types:
        </para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>
                        exact - which is the default
                    </para>
                </listitem>
                <listitem>
                    <para>
                        greater
                    </para>
                </listitem>
                <listitem>
                    <para>
                        lower
                    </para>
                </listitem>
                <listitem>
                    <para>
                        range
                    </para>
                </listitem>
                <listitem>
                    <para>
                        regex (available since 10.1 and SLES10)
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            "greater" and "lower" can be used for memsize or totaldisk for
            example. They can match only on rules which return an integer value.
            A range is only possible for integer values too and has the form of
            "value1-value2", for example "512-1024". regex can be used to match substrings
            like "ntel" will match "Intel","intel" and "intelligent".
        </para>
    </section>
    <section id="rulescombination">
        <title>Combine Attributes</title>
        <para>
            It's possible to combine multiple attributes via a logical operator. So it's
            possible to let a rule match if disksize is greater than 1GB or memsize
            is exact 512MB (well, not the best example maybe).
        </para>
        <para>
            You can do that with the "operator" element in the rules.xml file. Here is
            an example:
        </para>
        <para>
        <screen>
<![CDATA[
<rule>
   <disksize>
        <match>/dev/hda 1000</match>
        <match_type>greater</match_type>
   </disksize>
   <memsize>	    
        <match>256</match>
        <match_type>greater</match_type>
   </memsize>
   <result>
        <profile>machine2.xml</profile>
        <continue config:type="boolean">false</continue>
   </result>
   <operator>or</operator>
</rule>
]]>
        </screen>
        </para>
        <para>
            Just "and" and "or" are possible operators and the default operator 
            is "and".
        </para>
    </section>
    <section id="rulesstructure">
	<title>Rules file structure</title>
	<para>
	  The <filename>rules.xml</filename> file must have:	  
	</para>
	<itemizedlist>
	  <listitem>
	    <para>At least one rule</para>
	  </listitem>
	  <listitem>
	    <para>It must have the name <filename>rules.xml</filename></para>
	  </listitem>
	  <listitem>
	    <para>It must be located in the directory
	      <emphasis>rules</emphasis> in the profile repository</para>
	  </listitem>

	  <listitem>
	    <para>At least one attribute to match in the rule</para>
	  </listitem>
	</itemizedlist>
    </section>
  
    <section id="ruleattributes">
      <title>Predefined System Attributes</title>
	<para>
	  The following table lists the predefined system attributes you can
	  match in the rules file.
	</para>
    <para>
      If you are unsure about a value on your system, start an autoinstallation.
      If the proposal shows up, switch to the console via CTRL+ALT+F2 and run
      <screen>y2base ayast_probe ncurses
      </screen>. It might help to to turn the confirmation on for this, so that
      the installation does not start in the background while you are watching the
      values. The textbox with the values is scrollable.
    </para>
	<table frame='top'>
	  <title>System Attributes</title>
	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>Attribute</entry>
		<entry>Values</entry>
		<entry>Description</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>hostaddress</entry>
		<entry>IP address of the host</entry>
		<entry>This attribute must always match exactly</entry>
	      </row>
	      <row>
		<entry>hostname</entry>
		<entry>The name of the host</entry>
		<entry>This attribute must always match exactly</entry>
	      </row>
	      <row>
		<entry>domain</entry>
		<entry>Domain name of host</entry>
		<entry>This attribute must always match exactly</entry>
	      </row>
	      <row>
		<entry>installed_product</entry>
		<entry>The name of the product that is getting installed. For example "SUSE LINUX"</entry>
		<entry>This attribute must always match exactly</entry>
	      </row>
	      <row>
		<entry>installed_product_version</entry>
		<entry>The version of the product that is getting installed. For example "9.3"</entry>
		<entry>This attribute must always match exactly</entry>
	      </row>
	    <row>
		<entry>network</entry>
		<entry>network address of host</entry>
		<entry>This attribute must always match exactly</entry>
	      </row>
	      <row>
		<entry>mac</entry>
		<entry>MAC address of host</entry>
		<entry>This attribute must always match exactly. (MAC addresses
		to be matched should be  in the form <emphasis>0080C8F6484C</emphasis></entry>
	      </row>
	      <row>
		<entry>linux</entry>
		<entry>Number of installed Linux partitions on the system</entry>
		<entry>This attribute can be 0 or more</entry>
	      </row>
	      <row>
		<entry>others</entry>
		<entry>Number of installed non-Linux partitions on the system</entry>
		<entry>This attribute can be 0 or more</entry>
	      </row>
	      <row>
		<entry>xserver</entry>
		<entry>X Server needed for graphic adapter</entry>
		<entry>This attribute must always match exactly</entry>
	      </row>
	      <row>
		<entry>memsize</entry>
		<entry>Memory available on host in MByes</entry>
		<entry>All match types are available</entry>
	      </row>
	      <row>
		<entry>totaldisk</entry>
		<entry>Total disk space available on host in MBytes</entry>
		<entry>All match types are available</entry>
	      </row>
	      <row>
		<entry>haspcmica</entry>
		<entry>System has PCMCIA (i.e Laptops)</entry>
		<entry>Exact match required, 1 for available PCMCIA or 0 for none</entry>
	      </row>
	      <row>
		<entry>hostid</entry>
		<entry>Hex representation of IP address</entry>
		<entry>Exact match required</entry>
	      </row>
	      <row>
		<entry>arch</entry>
		<entry>Architecture of host</entry>
		<entry>Exact match required</entry>
	      </row>
	      <row>
		<entry>karch</entry>
		<entry>Kernel Architecture of host (i.e. SMP kernel, Athlon Kernel)</entry>
		<entry>Exact match required</entry>
	      </row>
	      <row>
		<entry>disksize</entry>
		<entry>Drive device and size</entry>
		<entry>All match types are available</entry>
	      </row>
	      <row>
		<entry>product</entry>
                <entry>The hardware product name as specified in SMBIOS</entry>
		<entry>Exact match required</entry>
	      </row>
	      <row>
		<entry>product_vendor</entry>
                <entry>The hardware vendor as specified in SMBIOS</entry>
		<entry>Exact match required</entry>
	      </row>
	      <row>
		<entry>board</entry>
                <entry>The system board name as specified in SMBIOS</entry>
		<entry>Exact match required</entry>
	      </row>
	      <row>
		<entry>board_vendor</entry>
                <entry>The system board vendor as specified in SMBIOS</entry>
		<entry>Exact match required</entry>
	      </row>
	      <row>
		<entry>custom1-5</entry>
		<entry>Custom rules using shell scripts</entry>
		<entry>All match types are available</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
    </section>
  </section>
  
  <section id="classes">
    <title>Classes</title>
    <para>
      You can assign a system to different classes which can be defined in the
      control file. Unlike rules, classes have to be configured in the control
      file and represent a configuration which is typical for a group of
      systems.
    </para>
    <para>
      Here is an example of a class definition:
    </para>
    <para>
        <screen>
<![CDATA[
<classes config:type="list">
    <class>
        <class_name>TrainingRoom</class_name>
        <configuration>Software.xml</configuration>
    </class>
</classes>
]]>
        </screen>
    </para>
    <para>
        The file Software.xml must be in the directory "classes/TrainingRoom/" then and
        it will get fetched from the same place like the autoyast profile and the rules were
        fetched from.
    </para>
    <para>
        If you have multiple kind of profiles and those profiles share parts, it's recommended to
        use classes for that. You just have to change the class and all profiles using that class
        are fixed too. By the way, you can reach something similar by using XIncludes.
    </para>
    <para>
      Using the configuration management system, you can define a set of
      classes. The class definition consists  of the following variable for each class:
    </para>
    <itemizedlist>
      <listitem>
	<para>	        
	  Name: Class name
	</para>
      </listitem>
      <listitem>
	<para>	    
	  Descriptions: Class description
	</para>
      </listitem>
      <listitem>
	<para>	        
	  Order: Order (or priority) of the class in the stack of migration
	</para>
      </listitem>
    </itemizedlist>
    <figure>
      <title>Defining Classes</title>
      <mediaobject>&cms-class-definitions;</mediaobject>	  
    </figure>
    <para>
      You can create as many classes as you need, however it is
      recommended to keep the set of classes as small as possible to keep the
      configuration system concise. As an example, the following set of
      classes can be used:
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  site: Classes describing a physical location or site.
	</para>
      </listitem>
      <listitem>
	<para>
	  machine: Classes describing a type of machine or make
	</para>
      </listitem>
      <listitem>
	<para>
	  role: Classes describing the function of the machine to be
	  installed
	</para>
      </listitem>
      <listitem>
	<para>
	  group: Classes describing a department or a group within a site
	  or a location.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      A  file saved in a class directory can have the same syntax and format as a
      regular control file but  represents a subset of the configuration. For example,
      to create a new control file  for a special computer with a specific network
      interface, only the resource in the control file, which controls
      the configuration of the network is needed. Having multiple network
      types, you can merge the one needed for a special type of hardware
      with other class files and create a new control file which suits
      the system being installed.
    </para>

  </section>

  <section id="mixinfrulesclasses">
    <title>Mixing Rules and Classes</title>
    <para>
      It is possible to mix rules and classes during an auto-installation
      session. For example you can identify a system using rules which contain
      class definitions in them. The process is described in the figures
      <quote><link linkend='rulesflow'
	  endterm="rulesflow.title"></link></quote>.
    </para>
    <para>
      After retrieving the rules and merging them, the generated control file
      is parsed and the presence of class definitions is checked. If classes
      are defined, then the class files are retrieved from the original
      repository and a new merge process is initiated.
    </para>
  </section>
  <section id="merging">
    <title>The merging process of Rules and Classes</title>
    <para>
      With classes and with rules, multiple XML files get merged to one resulting
      XML file. This process of merging is often confusing for people, because
      it behaves different than one would expect.
    </para>
    <para>
      Let's take a look at two XML parts that we want to merge:
    </para>
    <para>
      <screen>
&lt;partitioning config:type=&quot;list&quot;&gt;
    &lt;drive&gt;
        &lt;partitions config:type=&quot;list&quot;&gt;
            &lt;partition&gt;
                &lt;filesystem config:type=&quot;symbol&quot;&gt;swap&lt;/filesystem&gt;
                &lt;format config:type=&quot;boolean&quot;&gt;true&lt;/format&gt;
                &lt;mount&gt;swap&lt;/mount&gt;
                &lt;partition_id config:type=&quot;integer&quot;&gt;130&lt;/partition_id&gt;
                &lt;size&gt;2000mb&lt;/size&gt;
            &lt;/partition&gt;
            &lt;partition&gt;
                &lt;filesystem config:type=&quot;symbol&quot;&gt;xfs&lt;/filesystem&gt;
                &lt;partition_type&gt;primary&lt;/partition_type&gt;
                &lt;size&gt;4Gb&lt;/size&gt;
                &lt;mount&gt;/data&lt;/mount&gt;
            &lt;/partition&gt;
        &lt;/partitions&gt;
    &lt;/drive&gt;
&lt;/partitioning&gt;
      </screen>
    </para>
    <para>
      <screen>
&lt;partitioning config:type=&quot;list&quot;&gt;
  &lt;drive&gt;
    &lt;initialize config:type=&quot;boolean&quot;&gt;false&lt;/initialize&gt;
    &lt;partitions config:type=&quot;list&quot;&gt;
         &lt;partition&gt;
           &lt;format config:type=&quot;boolean&quot;&gt;true&lt;/format&gt;
           &lt;filesystem config:type=&quot;symbol&quot;&gt;xfs&lt;/filesystem&gt;
           &lt;mount&gt;/&lt;/mount&gt;
           &lt;partition_id config:type=&quot;integer&quot;&gt;131&lt;/partition_id&gt;
           &lt;partition_type&gt;primary&lt;/partition_type&gt;
           &lt;size&gt;max&lt;/size&gt;
         &lt;/partition&gt;
    &lt;/partitions&gt;
    &lt;use&gt;all&lt;/use&gt;
  &lt;/drive&gt;
&lt;/partitioning&gt;
      </screen>
    </para>
    <para>
      What you would expect is, that you'll end up in a profile with 3 partitions.
      That is not the case. You'll end up with two partitions and the first partition
      is a mixup of the swap and the root partition. Stuff that is configured in both
      partitions, like <emphasis>mount</emphasis> or <emphasis>size</emphasis>, will 
      be used from the second file.
      Stuff that only exists in the first or second partition, will be copied to the
      merged partition too.
    </para>
    <para>
      Sometimes this is what you want, but sometimes this is not what you want. Actually,
      in my example above, this is both. You don't want a second <emphasis>drive</emphasis>
      right? You want the two drives to be merged into one but for partitions you want three seperate
      ones.
      So how can you achieve what you want? In this example, how do you get three partitions but still
      one drive?
    </para>
    <para>
      <note>For SLES9/SUSE Linux 10.0 and earlier versions</note> you can only use a trick. It's
      not official supported by autoyast and more a workaround than a nice solution. For each partition
      in one file, add an attribute to the partition like this:
    </para>
    <para>
      <screen>
&lt;partition dontmerge=&quot;1&quot;&gt;
...
&lt;/partitions&gt;
      </screen>
    </para>
    <para>
      The trick is, that the merge script will not detect the partitions as the same element type because of the
      new attribute. If you have more files, it might be needed to to add more attributes like <emphasis>dontmerge="2"</emphasis>.
    </para>
    <para>
      <note>For SLES10/SUSE Linux 10.1 and later</note>
      you can use the <emphasis>dont_merge</emphasis> element in the rules or classes file
      like this:
    </para>
    <para>
      <screen>
&lt;classes config:type=&quot;list&quot;&gt;
    &lt;class&gt;
        &lt;class_name&gt;swap&lt;/class_name&gt;
        &lt;configuration&gt;largeswap.xml&lt;/configuration&gt;
        &lt;dont_merge config:type=&quot;list&quot;&gt;
            &lt;element&gt;partition&lt;/element&gt;
        &lt;/dont_merge&gt;
    &lt;/class&gt;
&lt;/classes&gt;
      </screen>
    </para>
    <para>
      <screen>
&lt;rule&gt;
    &lt;board_vendor&gt;
        &lt;match&gt;ntel&lt;/match&gt;
        &lt;match_type&gt;regex&lt;/match_type&gt;
    &lt;/board_vendor&gt;
    &lt;result&gt;
        &lt;profile&gt;classes/largeswap.xml&lt;/profile&gt;
        &lt;continue config:type=&quot;boolean&quot;&gt;true&lt;/continue&gt;
        &lt;dont_merge config:type=&quot;list&quot;&gt;
          &lt;element&gt;partition&lt;/element&gt;
        &lt;/dont_merge&gt;
    &lt;/result&gt;
&lt;/rule&gt;
      </screen>
    </para>
  </section>
</chapter>

      <!--
       Local Variables:
       mode: xml
       sgml-parent-document: ("autoyast2.xml" "book" "chapter")
       End:
      -->
